// Code generated by generator using '{{.Global.TemplatePath}}'; DO NOT EDIT.
// Generation time: {{.Global.GenerationTime}}
{{- if .Global.Params}}
	// Parameters: {{$first := true}}{{range $key, $value := .Global.Params}}{{if $first}}{{$first = false}}{{else}} {{end}}{{$key}}={{$value}}{{end}}
{{- end}}

package {{.PackageName}}

import (
	"encoding/json"
	"microlog/tables"
)

// // // // // // // //

func (name {{.ColumnTypeName}}) String() string {
	return string(name)
}

func (name {{.ColumnTypeName}}) StringSQL() string {
	return "`" + Table + "." + string(name) + "`"
}

func (name {{.ColumnTypeName}}) Type() string {
	return NameToTypeMap[name]
}

func (name {{.ColumnTypeName}}) TableName() string {
	return Table
}

// // // //

func (obj *{{.DataObjName}}) JSON() ([]byte, error) {
	return json.Marshal(obj)
}

func (obj *{{.DataObjName}}) Children() tables.DataTableInterface {
	objTable := new({{.DataTableObjName}})

    {{range .ChildrenArr}} {{.}}
    {{end}}
	return objTable
}

// //

func (objTable *{{.DataTableObjName}}) JSON() ([]byte, error) {
	return json.Marshal(objTable)
}

func (objTable *{{.DataTableObjName}}) TableName() string {
	return {{.TableConstName}}
}

func (objTable *{{.DataTableObjName}}) TableColumns() map[tables.ColumnNameInterface]string {
	return {{.MapName}}
}

{{.ParentComment}}
func (objTable *{{.DataTableObjName}}) Parent() tables.DataInterface {
	obj := new({{.DataObjName}})

    {{range .ParentArr}} {{.}}
    {{end}}
	return obj
}
