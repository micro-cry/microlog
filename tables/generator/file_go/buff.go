package file_go

import (
	"bytes"
	"fmt"
	"strings"
)

// // // // // // // // // //

type bufObj struct {
	buf bytes.Buffer
}

func newBuf(packageName string) *bufObj {
	var b bytes.Buffer
	b.WriteString("// Code generated by '$ tables/generator/file_go'. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("\npackage %s\n\n", packageName))

	obj := new(bufObj)
	obj.buf = b
	return obj
}

func (obj *bufObj) Write(data []byte) {
	obj.buf.Write(data)
}

func (obj *bufObj) Bytes() []byte {
	return obj.buf.Bytes()
}

// //

func (obj *bufObj) WriteString(text string) {
	obj.buf.Write([]byte(text))
}

func (obj *bufObj) WriteLine(text string) {
	obj.buf.Write([]byte(text + "\n"))
}

func (obj *bufObj) WritePadLine(pad int, text string) {
	obj.buf.Write([]byte(strings.Repeat("\t", pad)))
	obj.buf.Write([]byte(text + "\n"))
}

func (obj *bufObj) WriteSeparator(sum int) {
	obj.WriteString("\n" + strings.Repeat("// ", sum) + "\n\n")
}

//

func (obj *bufObj) WriteImports(importArr []string) {
	l := len(importArr)

	if l > 0 {
		if l == 1 {
			obj.WriteLine(fmt.Sprintf("import \"%s\"", importArr[0]))

		} else {
			obj.WriteLine("import (")
			for _, line := range importArr {
				obj.WritePadLine(1, fmt.Sprintf("\"%s\"", line))
			}
			obj.WriteLine(")")
		}
	}
}
