package file_go

import (
	"bytes"
	"fmt"
	"strings"
)

// // // // // // // // // //

type bufObj struct {
	buf bytes.Buffer
}

func newBuf(packageName string) *bufObj {
	var b bytes.Buffer
	b.WriteString("// Code generated by '$ tables/generator/file_go'. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("\npackage %s\n\n", packageName))

	obj := new(bufObj)
	obj.buf = b
	return obj
}

func (obj *bufObj) Write(data []byte) {
	obj.buf.Write(data)
}

func (obj *bufObj) Bytes() []byte {
	return obj.buf.Bytes()
}

// //

func (obj *bufObj) WriteString(text ...string) {
	l := len(text)
	if l == 0 {
		return
	}

	if l == 1 {
		obj.buf.Write([]byte(text[0]))
	} else {
		obj.buf.Write([]byte(strings.Join(text, "")))
	}
}

func (obj *bufObj) WriteLine(text ...string) {
	obj.WriteString(text...)
	obj.buf.WriteString("\n")
}

func (obj *bufObj) WritePadString(pad int, text ...string) {
	obj.buf.WriteString(strings.Repeat("\t", pad))
	obj.WriteString(text...)
}

func (obj *bufObj) WritePadLine(pad int, text ...string) {
	obj.WritePadString(pad, text...)
	obj.buf.WriteString("\n")
}

func (obj *bufObj) WriteSeparator(sum int) {
	obj.WriteString("\n" + strings.Repeat("// ", sum) + "\n\n")
}

//

func (obj *bufObj) WriteImports(imports ...string) {
	l := len(imports)

	if l > 0 {
		if l == 1 {
			obj.WriteLine(fmt.Sprintf("import \"%s\"", imports[0]))

		} else {
			obj.WriteLine("import (")
			for _, line := range imports {
				obj.WritePadLine(1, fmt.Sprintf("\"%s\"", line))
			}
			obj.WriteLine(")")
		}
	}
}
