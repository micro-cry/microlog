package file_go

import (
	"bytes"
	"fmt"
	"go/format"
	"microlog/tables/generator"
	"os"
	"path/filepath"
	"strings"
	"unicode"
)

// // // // // // // // // //

func clearOldDir(pathToDir string) error {
	items, err := os.ReadDir(pathToDir)
	if err != nil {
		return err
	}

	for _, item := range items {
		if item.IsDir() && len(item.Name()) > len(DirPrefix) {
			if item.Name()[:len(DirPrefix)] == DirPrefix {
				fullPath := filepath.Join(pathToDir, item.Name())
				err = os.RemoveAll(fullPath)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

func createDir(pathToDir, dirName string) (string, error) {
	newPath := filepath.Join(pathToDir, DirPrefix+dirName)
	err := os.Mkdir(newPath, 0755)
	if err != nil {
		return "", err
	}

	return newPath, nil
}

func goNamespace(s string) string {
	if len(s) == 0 {
		return s
	}

	runes := []rune(s)
	first := unicode.ToUpper(runes[0])
	rest := strings.ToLower(string(runes[1:]))
	return string(first) + rest
}

//

func nameObj(tableName string) string {
	tableName = goNamespace(tableName)
	return tableName + "Obj"
}

func nameTableObj(tableName string) string {
	tableName = goNamespace(tableName)
	return tableName + "TableObj"
}

// //

func writeGoFile(pathToFile string, data []byte) error {
	file, err := os.OpenFile(pathToFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	formatted, err := format.Source(data)
	if err != nil {
		panic(err)
	}

	_, err = file.Write(formatted)
	return err
}

// //

func setHeaderGo(p string, b *bytes.Buffer) {
	b.WriteString("// Code generated by '$ tables/generator/file_go'. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("\npackage %s\n\n", p))
}

func setImports(b *bytes.Buffer, importArr []string) {
	l := len(importArr)

	if l > 0 {
		if l == 1 {
			b.WriteString(fmt.Sprintf("import \"%s\"\n", importArr[0]))

		} else {
			b.WriteString("import (\n")
			for _, line := range importArr {
				b.WriteString(fmt.Sprintf("\t\"%s\"\n", line))
			}
			b.WriteString(")\n")
		}
	}
}

func setSeparator(b *bytes.Buffer, sum int) {
	b.WriteString("\n" + strings.Repeat("// ", sum) + "\n\n")
}

func setColumTypeToString(b *bytes.Buffer, l uint32, t generator.ColumType) {
	switch t {

	case generator.ColumBool, generator.ColumByte, generator.ColumString:
		b.WriteString(t.String())

	case generator.ColumBytes:
		if l == 0 {
			b.WriteString("[]byte")
		} else {
			b.WriteString(fmt.Sprintf("[%d]byte", l))
		}

	case generator.ColumDateTime:
		b.WriteString("time.Time")

	default:
		b.WriteString("any")
	}
}
