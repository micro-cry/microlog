package file_go

import (
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"strings"
)

// // // // // // // // // //

func clearOldDir(pathToDir string) error {
	items, err := os.ReadDir(pathToDir)
	if err != nil {
		return err
	}

	for _, item := range items {
		if item.IsDir() {
			if item.Name()[:len(DirPrefix)] == DirPrefix {
				fullPath := filepath.Join(pathToDir, item.Name())
				err = os.RemoveAll(fullPath)
				if err != nil {
					return err
				}
			}
		}
	}

	return nil
}

func createDir(pathToDir, dirName string) (string, error) {
	newPath := filepath.Join(pathToDir, DirPrefix+dirName)
	err := os.Mkdir(newPath, 0755)
	if err != nil {
		return "", err
	}

	return newPath, nil
}

// //

func writeGoFile(pathToFile string, data []byte) error {
	file, err := os.OpenFile(pathToFile, os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		return err
	}
	defer file.Close()

	formatted, err := format.Source(data)
	if err != nil {
		panic(err)
	}

	_, err = file.Write(formatted)
	return err
}

// //

func setHeaderGo(p string, b *bytes.Buffer) {
	b.WriteString("// Code generated by '$ tables/generator/file_go'. DO NOT EDIT.\n")
	b.WriteString(fmt.Sprintf("\npackage %s\n\n", p))
}

func setSeparator(b *bytes.Buffer, sum int) {
	b.WriteString("\n" + strings.Repeat("// ", sum) + "\n")
}
