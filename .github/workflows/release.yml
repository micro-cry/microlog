# .github/workflows/release.yml
name: "release & publish"

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to release from"
        default: "main"
        required: false

env:
  GO_VERSION: "1.24.2"
  PUSH_BRANCH: ${{ github.event.inputs.branch || 'main' }}

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

# ---------------------------------------------------------------------------
# 1. PREPARE ‚îÄ detect current version and expose it via outputs
# ---------------------------------------------------------------------------
jobs:
  prepare:
    name: "üîß Prepare"
    runs-on: ubuntu-latest

    outputs:
      build_name: ${{ steps.ver.outputs.name }}
      build_ver: ${{ steps.ver.outputs.version }}

    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 0

      - name: üîß Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          cache: true
          go-version: ${{ env.GO_VERSION }}

      - name: üì• Read version from build scripts
        id: ver
        shell: bash
        run: |
          set -Eeuo pipefail
          NAME=$(./_run/scripts/sys.sh -n)
          VER=$(./_run/scripts/sys.sh -v)

          echo "name=$NAME"    >> "$GITHUB_OUTPUT"
          echo "version=$VER"  >> "$GITHUB_OUTPUT"

          echo "Detected version: $VER (package name: $NAME)"

  # ---------------------------------------------------------------------------
  # 2. GENERATE ‚îÄ run `go generate` and store resulting artefacts (optional)
  # ---------------------------------------------------------------------------
  generate:
    name: "üóÇÔ∏è Generate source files"
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 1

      - name: üîß Setup Go ${{ env.GO_VERSION }}
        uses: actions/setup-go@v5
        with:
          cache: true
          go-version: ${{ env.GO_VERSION }}

      - name: üì• go mod download
        run: go mod download

      - name: üõ†Ô∏è go generate
        shell: bash
        env:
          GOFLAGS: -mod=mod
        run: |
          set -Eeuo pipefail
          mkdir -p target tmp
          go generate ./...
          tree -a target || echo "(target is empty)"

      - name: üì¶ Upload generated artefacts
        uses: actions/upload-artifact@v4
        with:
          name: target
          path: target/
          if-no-files-found: error

  # ---------------------------------------------------------------------------
  # 3. RELEASE ‚îÄ strip heavy assets, tag and publish GitHub Release
  # ---------------------------------------------------------------------------
  release:
    name: "üöÄ Publish release"
    needs: [ prepare, generate ]
    runs-on: ubuntu-latest

    steps:
      - name: üõéÔ∏è Checkout ${{ env.PUSH_BRANCH }}
        uses: actions/checkout@v4
        with:
          ref: ${{ env.PUSH_BRANCH }}
          fetch-depth: 0

      - name: üóíÔ∏è Import version info
        run: |
          echo "BUILD_NAME=${{ needs.prepare.outputs.build_name }}" >> "$GITHUB_ENV"
          echo "BUILD_VER=${{ needs.prepare.outputs.build_ver }}"  >> "$GITHUB_ENV"

      - name: üì• Download generated artefact
        uses: actions/download-artifact@v4
        with:
          name: target
          path: target

      - name: üë§ Configure git user
        shell: bash
        run: |
          git config --global user.name  "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: üè∑Ô∏è Create stripped commit and tag
        shell: bash
        run: |
          set -Eeuo pipefail
          ORIGINAL_SHA=$(git rev-parse HEAD)

          git add -f target

          git rm -r --cached --ignore-unmatch .github _generate _run gen.go .gitignore
          git rm --cached --ignore-unmatch $(git ls-files '*.bin' '*.md')

          git commit -m "release(${BUILD_VER}): strip heavy assets"
          git tag -a "${BUILD_VER}" -m "Release ${BUILD_VER}"
          git push origin "${BUILD_VER}"

          git reset --hard "$ORIGINAL_SHA"

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.BUILD_VER }}
          name: ${{ env.BUILD_VER }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úîÔ∏è Bump internal version
        shell: bash
        run: |
          NEW_VER=$(./_run/scripts/sys.sh --increment --minor)

          git add ./_run/values/ver.txt
          git commit -m "actions [${NEW_VER}]"$'\n'"Build: [${BUILD_VER}] ‚û° [${NEW_VER}]"
          git push origin HEAD:${{ env.PUSH_BRANCH }}

          echo "üéâ Release ${BUILD_VER} published successfully!"

      - name: üßπ Clean up temporary artefacts
        if: always()
        uses: geekyeggo/delete-artifact@v5
        with:
          name: target
          failOnError: false
