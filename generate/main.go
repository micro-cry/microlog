package main

import (
	"bytes"
	"encoding/hex"
	"fmt"
	"go/format"
	"golang.org/x/crypto/blake2b"
	"microlog"
	"os"
	"path/filepath"
	"strings"
	"time"
)

// // // // // // // // // //

type TemplateFileObj struct {
	Name string
	Type string
}

func hashFromText(text string) string {
	h, _ := blake2b.New(16, nil)
	h.Write([]byte(text))
	return hex.EncodeToString(h.Sum(nil))
}

func main() {
	rootDir, err := os.Getwd()
	if err != nil {
		panic(err)
	}

	fmt.Println("Generate Global Values\t\t", rootDir)

	if filepath.Base(rootDir) != "microlog" {
		panic("start is not in `microlog` directory")
	}

	// //

	pathToDir := filepath.Join(rootDir, "templates")
	files, err := os.ReadDir(pathToDir)
	if err != nil {
		panic(fmt.Errorf("failed to read templates directory: %w", err))
	}

	pathToDir = "templates"
	var filesArr []*TemplateFileObj

	for _, file := range files {
		if !file.IsDir() {
			if filepath.Ext(file.Name()) == ".tmpl" {
				bufObj := new(TemplateFileObj)

				bufObj.Type = strings.Split(file.Name(), "-")[0]
				bufObj.Name = file.Name()[len(bufObj.Type)+1 : len(file.Name())-5]

				filesArr = append(filesArr, bufObj)
			}
		}
	}

	// //

	var buf bytes.Buffer
	buf.WriteString("// Code generated by microlog; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("// Generation time: %s\n", time.Now().Format(time.RFC3339)))
	buf.WriteString("\npackage microlog\n\nimport _ \"embed\"\n\n// // // // // // // //\n\n")

	buf.WriteString("var (\n")
	for _, file := range filesArr {
		hashName := hashFromText(file.Type + file.Name)

		buf.WriteString(fmt.Sprintf("\t//go:embed %s/%s-%s.tmpl\n", pathToDir, file.Type, file.Name))
		buf.WriteString("\th" + hashName + " string\n\n")
	}
	buf.WriteString(")\n\n")

	//

	buf.WriteString("var (\n")
	for _, file := range filesArr {
		buf.WriteString(fmt.Sprintf("\tFile%s = &EmbedTemplateObj{\n", microlog.NameValGo(file.Type, file.Name)))
		buf.WriteString("\t\tPath: \"" + pathToDir + "\",\n")
		buf.WriteString("\t\tType: \"" + file.Type + "\",\n")
		buf.WriteString("\t\tName: \"" + file.Name + "\",\n")
		buf.WriteString("\t\tData: h" + hashFromText(file.Type+file.Name) + ",\n")
		buf.WriteString("\t}\n\n")
	}

	buf.WriteString("\tFilesArr = []*EmbedTemplateObj{\n")
	for _, file := range filesArr {
		buf.WriteString(fmt.Sprintf("\t\tFile%s,\n", microlog.NameValGo(file.Type, file.Name)))
	}
	buf.WriteString("\t}\n")
	buf.WriteString(")\n\n")

	// //

	file, err := os.OpenFile(filepath.Join(rootDir, "templates_map.go"), os.O_CREATE|os.O_WRONLY|os.O_TRUNC, 0644)
	if err != nil {
		panic(fmt.Errorf("open file: %s", err.Error()))
	}
	defer file.Close()

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		panic(fmt.Errorf("format template: %s", err.Error()))
	}

	_, err = file.Write(formatted)
	if err != nil {
		panic(fmt.Errorf("write file: %s", err.Error()))
	}

}
